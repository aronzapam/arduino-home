#include <SPI.h>
#include <Ethernet.h>
#include <dht11.h>
#include <Wire.h>
#include <SFE_BMP180.h>
SFE_BMP180 bmp180;
const int sensorPin = 9;// sensor lluvia ping 9 digital
double PresionNivelMar=1013.25; //presion sobre el nibel del mar en mbar
int adcPin = 0; //analogo
int adcValue = 0;
float v;
float real_v;
float porc;

int photocellPin = 3;     // pin
int photocellReading;     // lectura analoga


//Declara constantes y pin de entrada
#define DHT11PIN 7  // El sensor de temperatura y humedad digital


/* datos arduino http */
byte mac[] = { 0x00, 0x25, 0xAB, 0x42, 0x87, 0x4D };
IPAddress ip(192,168,1,100);
EthernetServer server(80);

/* datos hacia xampp */
byte grafico[] = { 192,168,1,10 };
EthernetClient graficocli;

dht11 DHT11;  //El objeto sensor



void setup() {
  // Abrir comunicacion serial y esperar que el puerto responda
  Serial.begin(9600);
  while (!Serial) {
    ; 
  }
  {

  if (bmp180.begin())
    Serial.println("BMP180 iniciado correctamenten");
  else
  {
    Serial.println("Error al iniciar el BMP180");
    while(1); // bucle infinito
  }
}

  pinMode(9, INPUT);
  //Inicializar la conexion Ethernet y el servidor
  Ethernet.begin(mac, ip);
  server.begin();
  Serial.print("server is at ");
  Serial.println(Ethernet.localIP());
  delay (50000);
} //Termina setup


void loop() {
    char status;
  double T,P,A;
  
  status = bmp180.startTemperature();//Inicio de lectura de temperatura
  if (status != 0)
  {   
    delay(status); //Pausa para que finalice la lectura
    status = bmp180.getTemperature(T); //Obtener la temperatura
    if (status != 0)
    {
      status = bmp180.startPressure(3);//Inicio lectura de presión
      if (status != 0)
      {        
        delay(status);//Pausa para que finalice la lectura        
        status = bmp180.getPressure(P,T);//Obtenemos la presión
        if (status != 0)
        {                  
          Serial.print("Temperatura: ");
          Serial.print(T);
          Serial.print(" *C , ");
          Serial.print("Presion: ");
          Serial.print(P);
          Serial.print(" mb , ");     
          //-------Calculamos la altitud--------
          A= bmp180.altitude(P,PresionNivelMar);
          Serial.print("Altitud: ");
          Serial.print(A);
          Serial.println(" m s.n.m.");    
        }      
      }      
    }   
  } 
  delay(1000);
  //Escucha clientes de entrada
  ///EthernetClient client = server.available();
  adcValue = analogRead(adcPin);
  Serial.print("Out put = ");
  Serial.println (adcValue);

  
  Serial.println("new client");
  int chk = DHT11.read(DHT11PIN);

  Serial.print("Read sensor: ");
  
  switch (chk) {
    case 0: 
      Serial.println("OK"); 
      break;

    case -1: 
      Serial.println("Checksum error"); 
      break;
  
    case -2: 
      Serial.println("Time out error"); 
      break;

    default: 
      Serial.println("Unknown error"); 
      break;
  }  
          

  Serial.print("Temperatura (Celsius): ");
  Serial.println((float)DHT11.temperature, 1);  

  Serial.print("Temperatura (Farenheit): ");
  Serial.println(Fahrenheit(DHT11.temperature), 1);
       
  Serial.print("Temperatura (Kelvin): ");
  Serial.println(Kelvin(DHT11.temperature), 1);

  Serial.print("Humedad (%): ");
  Serial.println((float)DHT11.humidity, (0));
       
  Serial.print("Mon&#243;xido de Carbono (CO)= ");
  Serial.println(adcValue);

  delay(60000);

    
  photocellReading = analogRead(photocellPin);
  int estado_luz = 0;
 
  if (photocellReading < 10){
    Serial.println(" - Indice luminosidad = LUZ MUY BRILLANTE");
    estado_luz = 4;
  } else if (photocellReading < 200) {
    Serial.println(" - Indice luminosidad = LUZ BRILLANTE  ");
    estado_luz = 3;
  } else if (photocellReading < 500) {
    Serial.println(" - Indice luminosidad =LUZ TENUE");
    estado_luz = 2;
  } else if (photocellReading < 800) {
    Serial.println(" - Indice luminosidad = OSCURO");
    estado_luz = 1;
  } else {
    Serial.println(" - Indice luminosidad = OSCURIDAD TOTAL");
    estado_luz = 0;
  }

  delay(60000);


  int value = 0;
  int estado_lluvia = 0;

  value = digitalRead(sensorPin);  //lectura digital de pin

  if (value == HIGH) {
      Serial.println("No se detecta lluvia");
      estado_lluvia = 0;
  }
 
  if (value == LOW) {
      Serial.println("Detectada lluvia");
      estado_lluvia = 1;
  }

  delay(60000);


  if (graficocli.connect(grafico, 80)>0) {
    graficocli.print("GET /arduino/controller/index.php?temp=");
    graficocli.print((float)DHT11.temperature);
    graficocli.print("&hum=");
    graficocli.print((float)DHT11.humidity);
    graficocli.print("&mc=");
    graficocli.print(adcValue);
    graficocli.print("&lluvia=");
    graficocli.print(estado_lluvia);
    graficocli.print("&luz=");
    graficocli.print(estado_luz);
    graficocli.println(" HTTP/1.0");
    graficocli.println("User-Agent: Arduino 1.0");
    graficocli.println();
    Serial.println("Conectado");
  } else {
    Serial.println("Fallo en la conexion");
  }

  if (!graficocli.connected()) {
    Serial.println("Cliente desconetado - http server(grafico)");
  }
  
  graficocli.stop();
  graficocli.flush();
  delay(50000); // Espero un minuto antes de tomar otra muestra

} //Termina loop

//Convertir de grados Centrigrados a Farenheit
double Fahrenheit(double celsius)
{
  return 1.8 * celsius + 32;
}

//Centigrados a Kelvin
double Kelvin(double celsius)
{
  return celsius + 273.15;
}
